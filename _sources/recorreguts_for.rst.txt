#####################
Un nou tipus de bucle
#####################

Ara que ja sabem resoldre problemes de recorreguts amb el ``while``
semblaria que ja hem acabat, oi? Doncs Java ens té preparada una sorpresa.

Recordem el problema dels 10 nombres naturals:

    Desenvolupa un programa que escrigui els primers 10 números naturals. És
    a dir: 1 2 3…10

I recordem també la solució més immediata:

.. code-block:: java
    :linenos:

    int numero = 1;          // variable de recorregut assignada al primer valor
    while (numero <= 10) {   // condició
        System.out.println(numero);
        numero = numero + 1; // passem el número al següent
    }

Ara, agafa aire i fixa't una altra manera d'escriure aquest fragment de
codi:

.. code-block:: java
    :linenos:

    for (int numero = 1;             // variable de recorregut
         numero <= 10;               // condició
         numero = numero + 1) {      // passa al número següent
         System.out.println(numero); // processa el valor
     }

Ep! Què ha estat això?

En realitat és només un canvi sintàctic:

* hi ha una *paraulota* nova, ``for``, en el lloc que ocupava el ``while`` 

* la declaració i inicialització, condició i increment apareixen entre els
  parèntesis (incloent els punts i coma!)

* a dins del bloc, només hi ha la part de processament dels valors de la
  variable de recorregut.

No sembla que hàgim guanyat gaire, oi?

Normalment, aquest tipus de fragments de codi s'escriuen de la següent
manera:

.. code-block:: java
    :linenos:

    for (int numero = 1; numero <= 10; numero = numero + 1) {
        System.out.println(numero);
    }

Això és més compacte que amb el ``while`` oi? Aquest és un avantatge.

L'avantatge principal del ``for``, però, és la claredat. Només veure la primera
línia, aviat pensaràs, ah! farem que la variable ``numero`` passi per tots els
valors del 1 al 10 i farem alguna cosa amb ella.

|exerciseicon__T| :doc:`exercici_13_05_for_naturals`

Consideracions addicionals sobre el ``for`` normalitzat
=======================================================

El ``for`` de Java, i molts altres llenguatges, permet molta flexibilitat.
Alguns dels usos poden esdevenir problemàtics ja que dificulten la comprensió
del bucle i faciliten la introducció d'errors difícils de localitzar.

Per exemple, considera un altre cop l'exemple que escriu els primers 10 naturals.

.. code-block:: java
    :linenos:

    for (int numero = 1; numero <= 10; numero = numero + 1) {
        System.out.println(numero);
    }

Suposa que vols fer que només escrigui els 5 primers. L'opció més lògica seria
canviar la condició i fer:

.. code-block:: java
    :linenos:
    :emphasize-lines: 1

    for (int numero = 1; numero <= 5; numero = numero + 1) {
        System.out.println(numero);
    }

Algú podria pensar, però, en la següent solució:

.. code-block:: java
    :linenos:
    :emphasize-lines: 1

    for (int numero = 1; numero <= 10; numero = numero + 1) {
        System.out.println(numero);
        if (numero == 5) {
            numero = 999;   // més gran que 10 segur! 
        }
    }

Aquest bucle també escriu els 5 primers naturals, però, per adonar-te'n, has de
llegir tot el bloc del bucle. Amb només la condició ja no n'hi ha prou ja que
la variable de recorregut (``numero``) es modifica també dins del cos del
bucle. Hem perdut l'avantatge principal d'aquest bucle.

En aquest curs volem agafar bons hàbits des del principi. Així que farem servir
un ``for`` que aquí anomenarem *normalitzat*.

El ``for`` normalitzat compleix les següents característiques:

* Una única variable de recorregut, de tipus enter, declarada i inicialitzada
  en el primer element del ``for()``.

* El segon element del ``for`` serà una única condició de permanència dins del
  bucle en la que la variable de recorregut apareix en primer lloc de
  l'expressió, a continuació vindrà el comparador i finalment l'expressió que
  defineix el límit del bucle.

  El comparador ha de ser un dels següents: <, <=, >, =>

* El tercer element del ``for`` consistirà en una instrucció de modificació de
  la variable de recorregut. Per exemple, ``numero = numero + 1``

* Finalment, i **extremadament important**, dins del bloc del bucle (el que hi
  ha entre ``{}``) no pot modificar-se la variable de recorregut. Només podem
  accedir a ella per consultar el seu valor.

Java ens permetrà fer ``for`` no normalitzats, però els sistemes de correcció
que acompanyen aquest curs t'acabaran rebutjant el teu codi.

Per tant, si ja domines l'ús del ``for`` normalitzat i vols fer *virgueries*,
Genial! Tot del que experimentis en trauràs nou coneixement! És més, pot ser
interessant discutir els teus experiments a classe. Únicament assegurat que la
solució que lliures dels teus exercicis contenen només la versió normalitzada.
