##################
La meva biblioteca
##################

Ara sabem que un mòdul definit a un programa el podem cridar des
d'un altre programa.

Queda, però, un tema: i si volem fer servir la funció
``respostaABoolean()`` en un context que no tingui res a veure amb
destrucció? Per exemple, imagina que has de desenvolupar una nova versió
del programa :doc:`la guia de semàfors <exercici_11_14_semafor>` que abans
de preguntar se n'asseguri que els usuaris són majors d'edat (recorda que
no era un assistent adequat per a nens!)

En aquest cas, podríem afegir el codi:

.. code-block:: java

    System.out.println("Ets major d'edat?");
    if (Autodestruccio.respostaABoolean(Entrada.readLine())) {
        // resta del programa original
    } else {
        System.out.println("Ho sento. Aquest és un programa per adults.");
    }

D'acord. Funcionaria. Però… què té a veure aquest codi amb
``Autodestruccio``?

Tot plegat, seria més comprensible si poguéssim independitzar
``respostaABoolean()`` del programa ``Autodestruccio``. Una proposta seria
crear ``UtilitatsConfirmacio`` amb la nostra funció. Així:

.. code-block:: Java
    :linenos:

    /* Utilitats de confirmació
     *
     * Aquest mòdul conté diferents utilitats per gestionar les confirmacions
     * Bé, de moment només en tenim una però potser anirem ampliant-ho
     */
    public class UtilitatsConfirmacio {
        /*
         * Donada una resposta textual, aquesta funció tradueix la resposta a
         * un booleà.
         * Considera true quan la resposta és, independentment de majúscules i
         * sense considerar espais a l'inici ni al final,
         * "sí", "s", "yes" o "y", i algunes variants amb errors ortogràfics.
         * Altrament considera false.
         */
        public static boolean respostaABoolean(String resposta) {
            if (null == resposta) {     // si la resposta és null, la donem com a false
                return false;
            }
            resposta = resposta.toLowerCase();
            if (resposta.equals("s") || resposta.equals("y")) {
                return true;
            }
            if (resposta.equals("sí") || resposta.equals("yes")) {
                return true;
            }
            if (resposta.equals("si") || resposta.equals("vale") || resposta.equals("yeah")) {
                return true;
            }
            return false;
        }
    }

Ara simplement hem de cridar ``UtilitatsConfirmacio.respostaABoolean()``
des dels programes ``Autodestruccio``, ``AutodestruccioTotal``,
``Semafor``, i tots els que a partir d'ara ens calgui demanar confirmació!

Per cert, t'has fixat que ``UtilitatsConfirmacio`` no té ``main()``? No li
cal doncs no serà executada mai directament per ``java``.

Una cosa més. Per fer servir ``UtilitatsConfirmacio`` als nostres
programes, haurem de copiar el fitxer ``UtilitatsConfirmacio.java`` a la
carpeta de cadascun dels programes. Java ens permet fer-ho millor,
simplement afegint la carpeta on es troba ``UtilitatsConfirmacio.java`` a
la variable ``CLASSPATH``. Malauradament, la versió que fas servir de
``prgtest`` encara no sap cop obtenir el teu ``CLASSPATH`` de manera que
jo pugui avaluar els teus exercicis a casa. Per aquesta raó, en els
propers exercicis no podràs fer servir el recurs d'utilitzar ``CLASSPATH``
i hauràs de copiar els fitxers a reutilitzar dins la carpeta de cada
exercici.

|exerciseicon__T| :doc:`exercici_17_05_utilitats_confirmacio`

|exerciseicon__T| :doc:`exercici_17_06_es_vocal`

|exerciseicon__T| :doc:`exercici_17_07_nomes_lletres`

