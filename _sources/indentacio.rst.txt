##################
Indentació i blocs
##################

Considera aquest codi en Java:

.. code-block:: java
    :linenos:

    public class MajorEdat {
        public static void main(String[] args) {
            int edat = Integer.parseInt(args[0]);
            if (edat >= 18) {
                System.out.println("Ets major d'edat");
            } else {
                System.out.println("Ets menor d'edat");
            }
        }
    }

Compara'l amb el següent:

.. code-block:: java

    public class MajorEdat {
    public static void main(String[] args) {
    int edat = Integer.parseInt(args[0]);
    if (edat >= 18) {
    System.out.println("Ets major d'edat");
    } else {
    System.out.println("Ets menor d'edat");
    }
    }
    }

Encara una altra versió:

.. code-block:: java

    public class MajorEdat { public static void main(String[] args) { int edat = Integer.parseInt(args[0]); if (edat >= 18) { System.out.println("Ets major d'edat"); } else { System.out.println("Ets menor d'edat"); } } }

Els tres programes són equivalents des del punt de vista de Java. Per
Java, els salts de línia i els espais són generalment superflus. Així que
les diferències les podem considerar estètiques.

Quin dels tres et sembla més llegible? Si no respons el primer, has suspès
l'assignatura! És broma però no massa ;)

El primer exemple presenta cada instrucció o inici de bloc en una línia.
Els blocs són definits per les claus ``{}``.

El següent diagrama representa els blocs en que està composat el codi:

.. graphviz::
    :align: center

    digraph {
        subgraph clusterClass {
            subgraph clusterMain {
                subgraph clusterElse {
                    "Ets menor d'edat"[shape=box];
                    label = "bloc else (línia 7)";
                }
                subgraph clusterIf {
                    "Ets major d'edat"[shape=box];
                    label = "bloc if (línia 5)";
                }
                label = "bloc main (línies 3 a 8)";
            }
            label = "bloc class (línies 2 a 9)";
        }
    }

Encara una manera més de veure-ho: com si fossin carpetes d'un sistema
de fitxers:

.. code-block:: console

    public class MajorEdat
    └── public static void main(String[] args)
        ├── int edat = Integer.parseInt(args[0])
        ├── if (edat >= 18)
        │   └── System.out.println("Ets major d'edat")
        └── else
            └── System.out.println("Ets menor d'edat")

Si t'agraden els noms, a aquest tipus d'estructura se la coneix com
*jerarquia* i la trobem en moltes situacions, no només a informàtica. Per
exemple, pensa en el teu arbre genealògic o, fins i tot, en un autèntic
arbre!

Quan es troben dins d'un bloc, les instruccions són desplaçades cap a la
dreta amb espais, per indicar que aquestes pertanyen al bloc.  Per
exemple, el ``public`` de la línia 2 comença sota la ``i`` de la línia 1.
Cap línia del codi comença just sota la ``p`` de la primera línia, fins
que el bloc es tanca a la línia 10.

A més, quan hi ha un bloc dins d'un altre, s'incrementa el desplaçament.
Per exemple, el codi de les línies 3 a 8 sempre comença a partir de la
``i`` de ``pulic`` de la línia 2.

Aquest desplaçament es realitza mitjançant espais
(en aquest cas 4), coneguts com a *sagnat*, però com que és una
paraula una mica *gore*, farem servir una *catalanització* del mot en
anglès *intentation*. Així, sovint li direm *indentació*.

Així, totes les línies dins d'un bloc, es desplacen (s'indenten) respecte
el seu bloc.

La indentació facilita la legibilitat del nostre codi, doncs ens permet
ràpidament saber quines són les instruccions que s'executaran sota la
condició.

Hi ha moltes maneres d'indentar. En aquest curs adoptem una de ben
estàndard per Java. Intenta seguir-la el màxim possible, doncs en aquest
curs és **obligatòria**.

|exerciseicon___| :doc:`exercici_11_05_indentacio`
