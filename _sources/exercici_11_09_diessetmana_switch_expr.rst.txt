#############################################################################
|exerciseiconO_T| Exercici 11_09. Els dies de la setmana (revisitat novament)
#############################################################################

.. rubric:: Context

* Carpeta de lliurament: ``11_09_diessetmana_switch_expr/``

* Continguts relacionats: :doc:`condicionals_conclusions`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [☼] Exercici :ref:`optatiu<descripcio_exercicis_optatius>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat


Ara que ja coneixes l'estructura condicional ``switch`` de l'exercici
:doc:`anterior<exercici_11_08_diessetmana_switch>`, pot ser un bon moment
per descobrir una altra versió del ``switch`` que ens ofereix Java.

Es coneix com ``switch expression`` i ens permet fer servir ``switch`` de
la manera que faríem anar l'operador ternari.

Per exemple, considera aquest traductor de notes numèriques a lletres:

.. code-block:: console

    jshell> int nota = 3;
    nota ==> 3

    jshell> switch (nota) {
       ...>     case 1,2,3,4 -> 'D';
       ...>     case 5,6 -> 'C';
       ...>     case 7,8 -> 'B';
       ...>     case 9,10 -> 'A';
       ...>     default -> 'X';
       ...> };
    $9 ==> 'D'

El `switch expression <https://docs.oracle.com/en/java/javase/17/language/switch-expressions.html>`_
és una estructura relativament nova en Java. 

Un cop ho hagis consultat, considera un altre cop l'exercici
dels :doc:`dies de la setmana <exercici_11_07_diessetmana>`. Crea una nova versió, en
aquesta ocasió fent servir ``switch`` en el format expressió.

Sabràs que ho has fet bé si el teu programa **només** té una instrucció d'escriptura.

Manté el nom del programa de l'exercici anterior.
